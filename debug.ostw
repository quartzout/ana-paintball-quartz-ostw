import "entrypoint.ostw";

rule: "Debug hud" {
    
    // CreateHudText(
    //     VisibleTo: HostPlayer, 
    //     Text: 
    //     Reevaluation: HudTextRev.VisibleToAndString
    // );
}

globalvar Boolean debugMode = false;
rule: "Turn off/on debug actions by pressing R + F + Shift"
Event.OngoingPlayer 
if (EventPlayer == HostPlayer)
if (IsButtonHeld(EventPlayer, Button.Interact))
if (IsButtonHeld(EventPlayer, Button.Reload))
if (IsButtonHeld(EventPlayer, Button.Ability1)) 
{
    debugMode = !debugMode;

    if (!debugMode) {
        DestroyAllDummyBots();
        ResetPlayerPhysicsSettings(EventPlayer);
    }
}

rule: "Debug mode hud" {
    
    CreateHudText(
        VisibleTo: VisibleIf(LocalPlayer == HostPlayer && debugMode),
        Text: "Debug actions are turned on",
        TextColor: Color.Rose,
        Reevaluation: HudTextRev.VisibleTo,
        Location: Location.Top,
        SortOrder: 1
    );
}


rule: "Spawn bot by pressing CTRL + F"
Event.OngoingPlayer
if (EventPlayer == HostPlayer)
if (IsButtonHeld(EventPlayer, Button.Crouch))
if (IsButtonHeld(EventPlayer, Button.Interact))
if (debugMode)
{

    Vector pos = RayCastHitPosition(EyePosition(HostPlayer), EyePosition(HostPlayer) + FacingDirectionOf(HostPlayer) * 100, All, HostPlayer, true) + RayCastHitNormal(EyePosition(HostPlayer), EyePosition(HostPlayer) + FacingDirectionOf(HostPlayer) * 100, All, HostPlayer, true) * 2;
    Player bot = CreateDummyBot(Hero.Ana, Team.All, -1, pos, Vector(0, 0, 0));
    
    // CreateHudText(
    //     VisibleTo: HostPlayer, 
    //     Text: 
    //     Reevaluation: HudTextRev.VisibleToAndString
    // );
    
}

rule: "bot does repeated action"
Event.OngoingPlayer
if(IsDummyBot(EventPlayer))
if (debugMode) 
{
    Loop(1, () => {
        SetFacing(EventPlayer, FacingDirectionOf(EventPlayer) + (Up() * RandomReal(-0.1, 0.1)) + (Right() * RandomReal(-0.1, 0.1)));
        PressButton(EventPlayer, Button.PrimaryFire);
    });
}

rule: "Go to welcome screen by pressing CTRL + R"
Event.OngoingPlayer
if (EventPlayer == HostPlayer)
if (IsButtonHeld(EventPlayer, Button.Reload))
if (IsButtonHeld(EventPlayer, Button.Crouch))
if (debugMode)
{
    Wait(1, WaitBehavior.IgnoreCondition);
    SendToWelcomeScreen(EventPlayer);
}


rule: "Fly by holding Space + F"
Event.OngoingPlayer
if (debugMode)
if (EventPlayer == HostPlayer)
if (IsButtonHeld(EventPlayer, Button.Interact))
if (IsButtonHeld(EventPlayer, Button.Jump))
{
    SetGravity(EventPlayer, 0);
    
    Teleport(EventPlayer, PositionOf(EventPlayer) + FacingDirectionOf(EventPlayer));
    CancelAllPlayerMotion(EventPlayer);
    
    Wait(0.1, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}