import "../Namespaces/_shared.ostw";
import "../Namespaces/_map_constants.ostw";
import "../Namespaces/_player_scores.ostw";


// Events
globalvar Player => void OnActivePlayerAddedEvent = null;
globalvar Player => void OnActivePlayerRemovedEvent = null;




rule: "On Player Joined"
Event.OnPlayerJoin
{
    # Presets
    DisableGameModeHud(EventPlayer);

    # Entering Welcome screen (or just making active if its a bot)
    if (EventPlayer.IsDummy()) AddNewActivePlayer(EventPlayer);
    else SendToWelcomeScreen(EventPlayer); 

    # Disabling abilities
    if (!sleepEnabled) SetAbility1Enabled(EventPlayer, false);
    if (!grenadeEnabled) SetAbility2Enabled(EventPlayer, false);
    if (!ultimateEnabled) SetUltimateAbilityEnabled(EventPlayer, false);
}




playervar Number afkTimer = 0;


void SendToWelcomeScreen(in Player player)
{
    RemovePlayerFromActive(player);
    player.isActive = false;
    
    DisableMovementCollisionWithEnvironment(player, true);
    DisableMovementCollisionWithPlayers(player);
    SetGravity(player, 0);
    SetInvisible(player, InvisibleTo.All);

    # Visuals
    DisableHeroHud(player);
    StartCamera(
        player, 
        EyePosition: MAP_SETTINGS.WelcomeScreenViewPoint, 
        LookAtPosition: MAP_SETTINGS.WelcomeScreenViewPoint + MAP_SETTINGS.WelcomeScreenDirection);

    # Moving and looking
    SetMoveSpeed(player, 0);

    # Buttons
    DisallowButton(player, Button.PrimaryFire);
    DisallowButton(player, Button.SecondaryFire);
    DisallowButton(player, Button.Ability1);
    DisallowButton(player, Button.Ability2);
    DisallowButton(player, Button.Ultimate);
    DisallowButton(player, Button.Interact);
    DisallowButton(player, Button.Jump);
    DisallowButton(player, Button.Crouch);
    DisallowButton(player, Button.Melee);
    DisallowButton(player, Button.Reload);

}


globalvar Any typehack;

void AddNewActivePlayer(in Player player)
{
    # Waiting until player is completely spawned
    WaitUntil(HasSpawned(player), 99999);

    Wait(0.25, WaitBehavior.IgnoreCondition);

    # HUD event invoking
    OnActivePlayerAddedEvent(player);

    // filling players enemy array
    player.enemies = activePlayers;

    // Updating everyones enemy array
    foreach (Player activePlayer in activePlayers) {
        if (activePlayer == player) continue;
        activePlayer.enemies.ModAppend(player);
    }

    # Making player active
    player.isActive = true;
    activePlayers.ModAppend(player);
    UpdatePlacesForEveryPlayer();

    # Resetting physics
    ResetPlayerPhysicsSettings(player);

    typehack = player;
    color = AVAILABLE_PLAYER_COLORS[StringLength(typehack) % CountOf(AVAILABLE_PLAYER_COLORS)];

    # Turning on coloring of this player for everyone else
    StartForcingPlayerOutlines(player, activePlayers, true, color, OutlineType.Default);

    // Turning on coloring of everyone else for this player
    foreach (Player activePlayer in activePlayers)
    {
        StartForcingPlayerOutlines(activePlayer, player, true, activePlayer.color, OutlineType.Default);
    }

    # Start afk timer
    player.afkTimer = 0;
    ChaseVariableAtRate(player.afkTimer, AFK_TRIGGER_TIME, 1, RateChaseReevaluation.None);
}


void RemovePlayerFromActive(in Player player)
{
    OnActivePlayerRemovedEvent(player);

    ModifyVariable(activePlayers, Operation.RemoveFromArrayByValue, player);
    // Updating everyones enemy array
    foreach (Player activePlayer in activePlayers) {
        if (activePlayer == player) continue;
        ModifyVariable(activePlayer.enemies, Operation.RemoveFromArrayByValue, player);
    }
}

//----------------------------------------------------------------------------------------------
//                                     EVENTS
//----------------------------------------------------------------------------------------------



rule: "Remove player from active players when they leave"
Event.OnPlayerLeave
{
    RemovePlayerFromActive(EventPlayer);
}


rule: "Leaving Welcome Screen"
Event.OngoingPlayer
if ((IsButtonHeld(EventPlayer, Button.Jump) || IsButtonHeld(EventPlayer, Button.Ability2)))
if (!isActive)
{
    # Language
    if (IsButtonHeld(EventPlayer, Button.Ability2))
        language = SupportedLanguage.Russian;
    else
        language = SupportedLanguage.English;
        
    # Reset physics
    ClearStatus(EventPlayer, Status.PhasedOut);
    EnableMovementCollisionWithEnvironment(EventPlayer);
    SetInvisible(EventPlayer, InvisibleTo.None);

    # Adding new active player
    AddNewActivePlayer(EventPlayer);

    # Spawn
    Respawn(EventPlayer);

    # Waiting until spawn
    Wait(0.25, WaitBehavior.IgnoreCondition);

    # Reset visuals
    StopCamera(EventPlayer);
    EnableHeroHud(EventPlayer);

    # buttons
    AllowButton(EventPlayer, Button.PrimaryFire);
    AllowButton(EventPlayer, Button.SecondaryFire);
    AllowButton(EventPlayer, Button.Ability1);
    AllowButton(EventPlayer, Button.Ability2);
    AllowButton(EventPlayer, Button.Ultimate);
    AllowButton(EventPlayer, Button.Interact);
    AllowButton(EventPlayer, Button.Jump);
    AllowButton(EventPlayer, Button.Crouch);
    AllowButton(EventPlayer, Button.Melee);
    AllowButton(EventPlayer, Button.Reload);
}



//----------------------------------------------------------------------------------------------
//                                     AFK
//----------------------------------------------------------------------------------------------


rule: "Trigger AFK when players afkTimer exceeded the afkTriggerTime"
Event.OngoingPlayer
if (afkTimer >= AFK_TRIGGER_TIME)
{
    SendToWelcomeScreen(EventPlayer);
}

rule: "Reset AFK timer when player moved"
Event.OngoingPlayer
if (MagnitudeOf(ThrottleOf(EventPlayer)) > 0)
{
    afkTimer = 0;
    Wait(0.25, WaitBehavior.IgnoreCondition);
    LoopIfConditionIsTrue();
}

rule: "Reset AFK timer when player shot, meleed or jumped or interacted"
Event.OngoingPlayer
if ((IsFiringPrimary(EventPlayer) || IsJumping(EventPlayer) || IsMeleeing(EventPlayer) || IsButtonHeld(EventPlayer, Button.Interact)) == true)
{
    afkTimer = 0;
}

rule: "Reset AFK timer when player used ability"
Event.OngoingPlayer
if ((IsUsingAbility1(EventPlayer) || IsUsingAbility2(EventPlayer) || IsUsingUltimate(EventPlayer)) == true)
{
    afkTimer = 0;
}

