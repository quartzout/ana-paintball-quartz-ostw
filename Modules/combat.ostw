import "../Namespaces/_helpers.ostw";
import "../Namespaces/_constants.ostw";
import "../Namespaces/_shared.ostw";


rule: "Player shoots enemy"
Event.OnDamageDealt
if (RoundToInteger(EventDamage(), Rounding.Down) == 2)
{
    Kill(Victim(), EventPlayer);
}

rule: "Player sleeps enemy"
Event.OnDamageDealt
if (RoundToInteger(EventDamage(), Rounding.Nearest) == 5)
{
    Kill(Victim(), EventPlayer);
}

rule: "Player melees enemy"
Event.OnDamageDealt
if (IsMeleeing(EventPlayer))
{
    SetEnvironmentCreditPlayer(Victim(), EventPlayer);

    # Restoring victims hp
    HealPlayer(Victim());

    # Applying upward impulse on both victim and attacker
    ApplyImpulse(Victim(), Up(), 5, Relative.ToWorld, ContraryMotion.Cancel);
    ApplyImpulse(EventPlayer, Up(), 5, Relative.ToWorld, ContraryMotion.Cancel);

    # Applying general impulse on both victim and attacker. If victim is on ground, vertical component of a direction is ignored
    if (IsOnGround(Victim()))
    {
        Vector flattenedAttackerFacingDirectiction = DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer), 0);
        ApplyImpulse(Victim(), flattenedAttackerFacingDirectiction, 8, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(EventPlayer, Reverse(flattenedAttackerFacingDirectiction), 5, Relative.ToWorld, ContraryMotion.Cancel);
    }
    else
    {
        ApplyImpulse(Victim(), FacingDirectionOf(EventPlayer), 8, Relative.ToWorld, ContraryMotion.Cancel);
    }
}
