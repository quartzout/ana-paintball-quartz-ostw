import "\APQ\Quartz\quartz.ostw";

import "\APQ\Modules\Gameplay\_Shared\impulse_explosion.ostw";
import "\APQ\Modules\Gameplay\_Shared\player physics\player_physics.ostw";


import "\APQ\Options\Regular Options\definitions.ostw";

globalvar ImpulseGrenadeOptions grenadeOptions;

rule: "fetch options" {
    grenadeOptions = GetOptions<ImpulseGrenadeOptions>("GrenadeOptions");
}


playervar Boolean isThrowingGrenade = false;
playervar Number isThrowingGrenadeTimer = 0;
playervar Vector delayedGrenadeSimulationPoint;
playervar Vector delayedGrenadeVelocityVector;

Number GRENADE_TIMER_MAX_SECONDS: 3;


void SetPlayersHpForGrenade(in Player player) 
{
    SetPlayerHealth(player, MaxHealth(player) - 10);
}


rule: "Start simulating grenade when player threw it"
Event.OngoingPlayer
if (IsUsingAbility2(EventPlayer) == true)
{
    WaitUntilOptionsAreLoaded();

    # Setup
    EventPlayer.isThrowingGrenade = true;
    EventPlayer.delayedGrenadeSimulationPoint = EyePosition(EventPlayer);
    EventPlayer.delayedGrenadeVelocityVector = FacingDirectionOf(EventPlayer) * 30 * projectilePhysicsOptions.VELOCITY_SCALAR;

    # Lower players HP so that grenade can heal them on impact
    SetPlayersHpForGrenade(EventPlayer);

    # Delay to compensate for workshop event lag on grenade explosion
    Wait(0.025, WaitBehavior.IgnoreCondition);

    # Simulation point chase (simulation point is moving with velocity of velocity vector)
    ChaseVariableAtRate(
        variable: EventPlayer.delayedGrenadeSimulationPoint, 
        destination: EventPlayer.delayedGrenadeSimulationPoint + Normalize(EventPlayer.delayedGrenadeVelocityVector), 
        rate: MagnitudeOf(EventPlayer.delayedGrenadeVelocityVector), 
        reevaluation: RateChaseReevaluation.DestinationAndRate
    );
    
    # Velocity vector chase (velocity is lowering with speed of G m/s)
    ChaseVariableAtRate(
        variable: EventPlayer.delayedGrenadeVelocityVector, 
        destination: EventPlayer.delayedGrenadeVelocityVector + Down(), 
        rate: 9.8 * projectilePhysicsOptions.GRAVITY_SCALAR, 
        reevaluation: RateChaseReevaluation.DestinationAndRate);

    # Start timer to measure grenade's time in air
    EventPlayer.isThrowingGrenadeTimer = 0;
    ChaseVariableAtRate(EventPlayer.isThrowingGrenadeTimer, GRENADE_TIMER_MAX_SECONDS, 1, RateChaseReevaluation.None);
}



rule: "When the grenade is being thrown, prevent players healing by resetting thier hp every time they passively heal" 
Event.OnHealingDealt
if (Healer() == Healee() && EventPlayer.isThrowingGrenade)
{
    SetPlayersHpForGrenade(EventPlayer);
}

rule: "Grenade throw ended condition first: Grenade hit player that threw it and healed them"
Event.OnHealingDealt
if (
    EventPlayer.isThrowingGrenade && 
    Healer() == Healee() && 
    RoundToInteger(EventHealing(), Rounding.Nearest) == 10
)
{
    FinishGrenadeThrow(EventPlayer);
}

rule: "Grenade throw ended condition second: Grenade hit and damaged some other player"
Event.OnDamageDealt
if (EventPlayer.isThrowingGrenade && RoundToInteger(EventDamage(), Rounding.Nearest) == 60)
{
    FinishGrenadeThrow(EventPlayer);
}

rule: "Grenade throw ended condition third: Timer exceeded"
Event.OngoingPlayer
if (EventPlayer.isThrowingGrenadeTimer >= GRENADE_TIMER_MAX_SECONDS) {
    FinishGrenadeThrow(EventPlayer);
}

void FinishGrenadeThrow(in Player owner)
{
    WaitUntilOptionsAreLoaded();

    if (!owner.isThrowingGrenade) return;

    owner.isThrowingGrenade = false;
    StopChasingVariable(owner.delayedGrenadeSimulationPoint);
    StopChasingVariable(owner.delayedGrenadeVelocityVector);
    StopChasingVariable(owner.isThrowingGrenadeTimer);

    DoImpulseExplosionInRange(
        blastPosition: owner.delayedGrenadeSimulationPoint, 
        magnitude: grenadeOptions.EXPLOSION_IMPULSE,
        immunePlayer: null, 
        upwardPull: grenadeOptions.EXPLOSION_UPWARD_PULL,
        envCredit: owner);

    HealPlayer(owner);
}

rule: "Heal victims who were struck by grenade"
Event.OnDamageTaken 
if (RoundToInteger(EventDamage(), Rounding.Nearest) == 60) {
    HealPlayer(EventPlayer);
}