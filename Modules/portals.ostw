import "../Namespaces/_helpers.ostw";
import "../Namespaces/_constants.ostw";
import "../Namespaces/_impulse_explosion.ostw";
import "../Namespaces/_map_constants.ostw";
import "../Namespaces/_shared.ostw";
import "../Namespaces/_can_player_teleport.ostw";

class Portal {
    public Vector Position;
    public Number UsesLeft;
    public Number CooldownTimer = 0; 

    public constructor(Vector position, Number usesLeft) {
        Position = position;
        UsesLeft = usesLeft;
    }

    public Boolean IsOnCooldown(): CooldownTimer != 0;
} 

// Events
globalvar (Portal => void)[] OnPortalSpawnedEvent = null; 
globalvar (Player => void)[] OnNoWallMetOnTeleportEvent = null;
globalvar ((Vector, Vector, Player) => void)[] OnTeleportedEvent = null;
globalvar (Portal => void)[] OnPortalDespawnedEvent = null;
globalvar (Portal => void)[] OnPortalCooldownFinished = null;


globalvar Portal[] existingPortals;



rule: "Spawn Portals when theres not enough of them in the world"
if (existingPortals.Length < MAP_SETTINGS.MaxPortalsInWorld)
{
    
    // Spawning portals until maximum is reached
     
    # Getting a list of all unoccupied positions. IsTrueForAll doesnt work inside FilteredArray. 
    while(existingPortals.Length < MAP_SETTINGS.MaxPortalsInWorld) {
    
        // this is terribly inefficient and needs a Wait in between iterations to not crash the server, but it is called almost never so its fine for now 
        Wait(2);

        Vector[] unoccupiedPortalPositions = [];
        foreach (Vector availablePos in MAP_SETTINGS.PortalPositions) {
            if (
                existingPortals.Length == 0 ||
                IsTrueForAll(
                    existingPortals, 
                    existingPortal => existingPortal.Position != availablePos
                ) 
            ) {
                unoccupiedPortalPositions.ModAppend(availablePos);
            }

        }

        # Safety check
        if (unoccupiedPortalPositions.Length == 0)
        {
            SmallMessage(HostPlayer, "Cant spawn a portal, all predetermined places are occupied with other portals");
            return;
        }

        # Spawning a portal
        SpawnPortal(unoccupiedPortalPositions.Random());
    }

}

void SpawnPortal(in Vector spawnpoint)
{
    Portal newPortal = new Portal(position: spawnpoint, usesLeft: PORTAL_USES);
    existingPortals.ModAppend(newPortal);
    CallEvent(OnPortalSpawnedEvent, newPortal);
}

globalvar Number ANGLE_CONSTANT;
rule: "Set angle constant" {
    ANGLE_CONSTANT = ArctangentInDegrees(PORTAL_RADIUS / 10, 1);
}

rule: "Player pressed Interact"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer, Button.Interact))
if (EventPlayer.isActive)
{

    LogToInspector($"{<String>EventPlayer} pressed Interact");

    foreach (Portal portal in existingPortals) {
        
        if (CanPlayerTeleport(EventPlayer, portal)) {
            Boolean tpResult = TryTeleportPlayerToWhereTheyLook(EventPlayer);
            if (tpResult) UsePortal(portal);
            break;
        }

    }
    
}

void UsePortal(Portal portal) {

    # Despawning fully used portal
    if (portal.UsesLeft == 1) {
        DespawnPortal(portal);
        return;
    }

    portal.UsesLeft -= 1;

    # Initiating cooldown
    portal.CooldownTimer = PORTAL_USE_COOLDOWN;

}

void DespawnPortal(in Portal portal)
{
    existingPortals.ModRemoveByValue(portal);
    CallEvent(OnPortalDespawnedEvent, portal);
}


Boolean TryTeleportPlayerToWhereTheyLook(in Player player)
{
    
    LogToInspector($"trying to teleport {<String>player}");

    # Maximum position for the raycasts
    Vector EndPosition = FacingDirectionOf(player) * 100 + EyePosition(player);
    
    # Position thats been hit by raycast
    Vector wallHitPosition = RayCastHitPosition(
        StartPOS: EyePosition(player), 
        EndPOS: EndPosition, 
        PlayersToInclude: All, 
        PlayersToExclude: player);
   
    # Normal to hit surface
    Vector wallHitNormal = RayCastHitNormal(
        StartPOS: EyePosition(player), 
        EndPOS: EndPosition, 
        PlayersToInclude: All, 
        PlayersToExclude: player);
    
    # if no wall met
    if (EndPosition == wallHitPosition)
    {
        CallEvent(OnNoWallMetOnTeleportEvent, player);
        return false;
    }
    
    # Do Impulse Explosion At Teleportation point
    DoImpulseExplosionInRange(
        blastPosition: wallHitPosition + wallHitNormal * 0.05, 
        immunePlayer: player,
        envCredit: player
    );
    
    # Argument for OnTeleportedEvent
    Vector initialPlayerPos = EyePosition(player);
    
    # Cancel motion
    CancelAllPlayerMotion(player);
    
    Boolean isPlayerInWay = RayCastHitPlayer(
        StartPOS: EyePosition(player), 
        EndPOS: EndPosition, 
        PlayersToInclude: All, 
        PlayersToExclude: player
    ) != null;

    # If player teleports into another player, just teleport them stright to other player
    if (isPlayerInWay)
    {
        Teleport(player, wallHitPosition);
    }

    # If player teleports to a perpendicular-ish wall
    else if (AbsoluteValue(VerticalAngleFromDirection(wallHitNormal)) < 45)
    {
        # Teleport player slightly off the wall
        Teleport(player, wallHitPosition + wallHitNormal);

        # Set facing in the horizontal direction of walls normal
        SetFacing(player, DirectionFromAngles(HorizontalAngleFromDirection(wallHitNormal), 0), Relative.ToWorld);
        
        # Send player a little up and from the wall 
        ApplyImpulse(player, Up(), 2, Relative.ToWorld, ContraryMotion.Cancel);
        ApplyImpulse(player, wallHitNormal, 2.5, Relative.ToWorld, ContraryMotion.Cancel);
    }

    # If player is teleported to horizonal surfaces like floor or ceiling, teleport it even more further from the surface and does not change facing direction
    else if (VerticalAngleFromDirection(wallHitNormal) >= 45) Teleport(player, wallHitPosition + wallHitNormal * 2);

    # In other potential cases, just teleport player
    else Teleport(player, wallHitPosition);
    
    # Call Event
    CallEvent(OnTeleportedEvent, initialPlayerPos, wallHitPosition, player);

    return true;
}


void CancelAllPlayerMotion(in Player player)
{
    ApplyImpulse(player, Right(), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
    ApplyImpulse(player, Left(), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
    ApplyImpulse(player, Up(), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
    ApplyImpulse(player, Down(), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
    ApplyImpulse(player, Forward(), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
    ApplyImpulse(player, Backward(), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
}

rule: "Ticking portals cooldowns" {
    
    Number Delay: 0.3;

    Loop(Delay, () => {
        foreach (Portal portal in existingPortals) {
            if (portal.CooldownTimer > 0) portal.CooldownTimer = Max(0, portal.CooldownTimer - Delay);
        }
    });
}
