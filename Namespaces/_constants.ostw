
//Scope
globalvar Number MAX_SCOPE_TIME = WorkshopSettingReal("Scope", "Max Time in scope (sec.)", 1, 0.1, 10, -4);
// Abilities
globalvar Boolean sleepEnabled = WorkshopSettingToggle("Abilities", "Sleep dart enabled", true, -3);
globalvar Boolean grenadeEnabled = WorkshopSettingToggle("Abilities", "Impulse grenade enabled", true, -2);
globalvar Boolean debug_HudMessage1 = WorkshopSettingCombo("Abilities", "To change sleep or grenade cooldowns use \"heroes\" tab in match settings", 0, ["."], -1);
// Default Physics
globalvar Number GRAVITY_SCALAR = WorkshopSettingReal("Player Physics", "gravity", 1, 0.5, 2, 0);
globalvar Number MOVING_SPEED_SCALAR = WorkshopSettingReal("Player Physics", "Move Speed", 1, 0.5, 2, 1);
globalvar Number JUMP_VELOCITY_SCALAR = WorkshopSettingReal("Player Physics", "Jump Speed", 1, 0.5, 2, 2);

// Ultimate
globalvar Boolean ultimateEnabled = WorkshopSettingToggle("Ultimate", "Enabled", true, 3);
globalvar Number const_KillsToUltimate = WorkshopSettingInteger("Ultimate", "Kills to charge", 4, 1, 10, 4);
globalvar Number const_ultimateSleepCD = WorkshopSettingReal("Ultimate", "Sleep Cooldown", 0, 0, 10, 5);
globalvar Number const_ultimateGrenadeCD = WorkshopSettingReal("Ultimate", "Impulse Grenade Cooldown", 1.5, 1, 10, 6);

// Ultimate Physics
globalvar Number const_ultimateMoveSpeedMultiplie = WorkshopSettingReal("Ultimate Physics", "Мove Speed", 2, 1, 3, 4);
globalvar Number const_ultimateJumpVelocityMultip = WorkshopSettingReal("Ultimate Physics", "Jump Sрeed", 1.7, 1, 3, 5);
globalvar Number const_UltimateGravityMultiplier = WorkshopSettingReal("Ultimate Physics", "Grаvity", 1.5, 1, 3, 6);

// Projectile physics
globalvar Number PROJECTILE_VELOCITY_SCALAR = WorkshopSettingReal("Projectile Physics", "Velocity", 1, 0.1, 10, 7);
globalvar Number PROJECTILE_GRAVITY_SCALAR = WorkshopSettingReal("Projectile Physics", "Grаvitу", 2.2, 0.1, 10, 8);

// Grenade physics
globalvar Number EXPLOSION_IMPULSE = WorkshopSettingReal("Grenade Physics", "Knocking Impulse", 15, 5, 50, 9);
globalvar Number EXPLOSION_UPWARD_SKEW_COEF = WorkshopSettingReal("Grenade Physics", "Grenade Upward Coefficient", 1, 0, 10, 10);

// water saves
globalvar Number const_waterSaves = WorkshopSettingInteger("Save player from falling in water", "Number of bounces player has before they die", 2, 0, 4, 11);

// Portals
globalvar Number PORTAL_RADIUS = WorkshopSettingReal("Portals", "Portal radius", 2, 0.5, 4, 11);
globalvar Number PORTAL_USES = WorkshopSettingInteger("Portals", "Portal Uses before it despawns", 10, 1, 100, 12);
globalvar Number PORTAL_USE_COOLDOWN = WorkshopSettingReal("Portals", "Cooldown for using the same portal", 1, 0, 10, 14);

// Player stats
globalvar Number TIME_PERIOD_FOR_STATS = WorkshopSettingReal("Tracking player statistics", "Time period for tracking kills (sec.)", 30, 5, 600, 15);
globalvar Number PERIODS_IN_LONG_PERIOD = RoundToInteger(WorkshopSettingReal("Tracking player statistics", "Time period for averaging statistics (sec.)", 180, 30, 3600, 16) / TIME_PERIOD_FOR_STATS, Rounding.Nearest);
globalvar Number KILLS_FOR_KILL_STREAK = 5;

// Match
globalvar Number MATCH_TIME = 60 * WorkshopSettingInteger("Match", "Match Time (minutes)", 10, 2, 240, 0);



// // Variables
// globalvar Number portalsInWorld = 0;
// globalvar Number secondsElapsed = 0;
// globalvar Number portalIDsQueue = 0;
globalvar Number BACKSENSOR_FOV = 103;
globalvar Number AFK_TRIGGER_TIME = 30;
// // Emptying  Arrays
// globalvar Vector[] PortalPositions_array = [];
// globalvar Color[] portalDefaultColor_array = [];
// globalvar Number[] portalUsesLeft_array = [];
// globalvar Number[] LeaderboardHudIDs_Array = [];
// globalvar Number[] PortalEffectIds_array = [];
// globalvar Vector[] FilteredPortalPositions_array = [];
// globalvar Player[] activePlayers = [];

// Color Constants
globalvar Color[] AVAILABLE_PLAYER_COLORS = [
    Color.Yellow, 
    Color.Green, 
    Color.Red, 
    Color.Blue, 
    Color.Aqua, 
    Color.Orange, 
    Color.SkyBlue, 
    Color.Turquoise, 
    Color.LimeGreen, 
    Color.Rose];

globalvar Color PORTAL_HIGHLIGHT_COLOR = Color.Violet;
globalvar Color PORTAL_ON_COOLDOWN_COLOR = Color.Red;
globalvar Color const_portalCooldownBlinkColor = Color.Orange;
globalvar Color[] IDLE_PORTAL_COLORS_BY_USES_LEFT = [Color.Green, Color.Turquoise, Color.Aqua, Color.Blue, Color.Purple];
// globalvar Color[] const_placeColors = [
//     null, 
//     Color.Purple, 
//     Color.Blue, 
//     Color.SkyBlue, 
//     Color.White, 
//     Color.White, 
//     Color.White, 
//     Color.White, 
//     Color.White, 
//     Color.White, 
//     Color.White, 
//     Color.White, 
//     Color.White, 
//     Color.White, 
//     Color.White, 
//     Color.White];


// // Angle Calculation Constant



// // Player Vars
// playervar Number[] highlightedUltimatesIndexesArray = [];
// playervar Number[] portalCooldownTimers_array = [];
// playervar Number[] killTimestampsInLastLongPeriod = [];
// playervar Number[] killTimestampsInLastPeriod = [];
// playervar Number averageKillsPerPeriod = 0.001;
// playervar Number[] deathTimestampsInLastLongPeriod = [];
// playervar Number selfScoreboardHudID = null;
// playervar Boolean isLanguageChosen = false;
// playervar Boolean showLoadHud = false;


// // globalvar define const_ProjectileVelocityMult;
// // globalvar define const_ProjectileGravityMulti;
// // globalvar define debug_HudMessage1;
// // globalvar define const_GrenadeImpulse;
// // globalvar define AftTriggerTime;
// // globalvar define const_GrenadeUpwardBias;
// // globalvar define const_KillsToUltimate;
// // globalvar define PortalPositions_array;
// // globalvar define const_portalRadius;
// // globalvar define const_portalHighlightColor;
// globalvar define parameter_portalIndex;
// // globalvar define const_portalCooldownColor;
// // globalvar define portalIDsQueue;
// // globalvar define const_portalDefaultColor_array;
// // globalvar define const_maxPortalUses;
// // globalvar define portalDefaultColor_array;
// // globalvar define portalUsesLeft_array;
// // globalvar define PortalEffectIds_array;
// globalvar define cycle_arraySlot;
// // globalvar define const_angleCalculation;
// globalvar define cycle_portalIndex;
// globalvar define temp_lastCreatedportalIndex;
// globalvar define temp_angle;
// globalvar define temp_target;
// globalvar define temp_vector;
// // globalvar define FilteredPortalPositions_array;
// globalvar define parameter_blastPosition;
// globalvar define temp_position;
// // globalvar define const_portalCooldownBlinkColor;
// // globalvar define const_portalCooldown;
// globalvar define temp_raycastPosition;
// globalvar define return_success;
// globalvar define temp_normal;
// globalvar define temp_hit_players;
// globalvar define cycle_players;
// globalvar define parameter_portalPosition;
// globalvar define parameter_player;
// globalvar define parameter_exceptionPlayer;
// // globalvar define portalsInWorld;
// // globalvar define map_specific_settings.Get("portalPositions");
// // globalvar define temp_avalablePortalPositions;
// globalvar define debug_portalPositionsArray;
// globalvar define temp_portalIndex;
// globalvar define debug_portalID;
// globalvar define return_createdPortalIndex;
// // globalvar define map_specific_settings.Get("enviromentalHeight");
// // globalvar define const_moveSpeedMultiplier;
// // globalvar define const_gravityMultiplier;
// // globalvar define const_jumpVelocityMultiplier;
// // globalvar define const_ultimateMoveSpeedMultiplie;
// // globalvar define const_ultimateJumpVelocityMultip;
// // globalvar define const_UltimateGravityMultiplier;
// //globalvar define const_maxScopeTime;
// // globalvar define const_FOV;
// // globalvar define map_specific_settings.Get("welcomeScreenViewPoint");
// // globalvar define map_specific_settings.Get("welcomeScreenViewDirect");
// // globalvar define const_avalablePlayerColors;
// // globalvar define TIME_PERIOD_FOR_STATS;
// // globalvar define secondsElapsed;
// // globalvar define PERIODS_IN_LONG_PERIOD;
// globalvar define PlayersSortedByScore;
// // globalvar define const_newLine;
// // globalvar define const_placeColors;
// globalvar define parameter_score;
// globalvar define temp_player;
// globalvar define topPlayer;
// globalvar define secondPlayer;
// // globalvar define LeaderboardHudIDs_Array;
// // globalvar define sleepEnabled;
// // globalvar define activePlayers;
// // globalvar define ultimateEnabled;
// // globalvar define grenadeEnabled;
// // globalvar define const_waterSaves;
// // globalvar define map_specific_settings.Get("waterSaveImpulse");
// // globalvar define const_ultimateSleepCD;
// // globalvar define const_ultimateGrenadeCD;
// // globalvar define currentMapIsSupported;
// // globalvar define const_matchTime;
// // globalvar define map_specific_settings.Get("MaxPortalsInWorld");
// playervar define scopeTimer;
// playervar define waterSavesLeft;
// playervar define isThrowingGrenade;
// playervar define killsToUltimate;
// // playervar define highlightedUltimatesIndexesArray;
// playervar define paintballEffects_array;
// // playervar define portalCooldownTimers_array;
// playervar define p_cycle_portalIndex;
// playervar define portal_POV_effect_id;
// playervar define delayedGrenadeSimulationPoint;
// playervar define portal_beam_effect_id;
// playervar define delayedGrenadeVelocityVector;
// playervar define playerParameter_startingEyePos;
// playervar define isRussian;
// playervar define playerParameter_raycastPos;
// playervar define ultimateBeamEffectChasePoint;
// playervar define waterSaveEffectId;
// playervar define ultimateGivenDamageModID;
// playervar define ViewAngleArrayForBackSensor_Arr;
// playervar define uCycle_players;
// playervar Player[] enemies_Array = [];
// playervar define uTemp_currentPlayer;
// playervar define uTemp_angle;
// playervar define color;
// // playervar define isLanguageChosen;
// // playervar define averageKillsPerPeriod;
// playervar define killsPerPeriod;
// // playervar define killTimestampsInLastPeriod;
// playervar define cycle_arrayIndex;
// // playervar define killTimestampsInLastLongPeriod;
// playervar define place;
// playervar define killstreak;
// // playervar define deathTimestampsInLastLongPeriod;
// playervar define killDeathRatio;
// // playervar define selfScoreboardHudID;
// playervar define sleepKillTimestampsInLastLongPeriod;
// playervar define scopedKillTimestampsInLastLongPeriod;
// playervar define unscopedKillTimestampsInLastLongPeriod;
// playervar define sleepKillsPercent;
// playervar define scopedKillsPercent;
// playervar define unscopedKillsPercent;
// playervar define temp_value;
// playervar define ultimateRecievedDamageModID;
// playervar define aimAtTheWallTimer;
// // playervar define showLoadHud;
// playervar define afkTimer;


