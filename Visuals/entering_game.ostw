import "../Namespaces/_shared.ostw";
import "../Namespaces/_player_scores.ostw";
import "../Modules/entering_game.ostw";


playervar Number scoreboardEntryHudId = null;

rule: "Instantiating modules" {
    Subscribe(OnActivePlayerAddedEvent, AddScoreboardEntryForPlayer);
    Subscribe(OnActivePlayerAddedEvent, AddPlayerOutlines);
    Subscribe(OnActivePlayerRemovedEvent, RemoveScoreboardEntryForPlayer);
    Subscribe(OnPlayerGoesToWelcomeScreen, PlayerGoesToWelcomeScreen);
    Subscribe(OnPlayerLeavesWelcomeScreen, PlayerLeavesWelcomeScreen);
}


void PlayerGoesToWelcomeScreen(in Player player) {
    
    DisableHeroHud(player);
    StartCamera(
        player, 
        EyePosition: MAP_SETTINGS.WelcomeScreenViewPoint, 
        LookAtPosition: MAP_SETTINGS.WelcomeScreenViewPoint + MAP_SETTINGS.WelcomeScreenDirection
    );
}

void PlayerLeavesWelcomeScreen(in Player player) {
    StopCamera(EventPlayer);
    EnableHeroHud(EventPlayer);
}

void AddPlayerOutlines(in Player player) {
    
    color = AVAILABLE_PLAYER_COLORS[StringLength(<String>player) % CountOf(AVAILABLE_PLAYER_COLORS)];

    # Turning on coloring of this player for everyone else
    StartForcingPlayerOutlines(player, activePlayers, true, color, OutlineType.Default);

    // Turning on coloring of everyone else for this player
    foreach (Player activePlayer in activePlayers)
    {
        StartForcingPlayerOutlines(activePlayer, player, true, activePlayer.color, OutlineType.Default);
    }
}

void AddScoreboardEntryForPlayer(in Player player) {

    if (player.scoreboardEntryHudId != null) return;

    Player FrozenEventPlayer: EvaluateOnce(EventPlayer);

    scoreboardEntryHudId = CreateHudText(
        VisibleTo: ActiveIf(CountOf(activePlayers) >= 2), 
        Subheader: 
            LocalPlayer != EvaluateOnce(EventPlayer) ? 
            $"{FrozenEventPlayer.place}: {FrozenEventPlayer} - {FrozenEventPlayer.averageKillsPerPeriod}" : 
            "", 
        Text: 
            LocalPlayer == EvaluateOnce(EventPlayer) ? 
            $"{FrozenEventPlayer.place}: {FrozenEventPlayer} - {FrozenEventPlayer.averageKillsPerPeriod}" : 
            "", 
        Location: Location.Right, 
        SortOrder: FrozenEventPlayer.place, 
        SubheaderColor: FrozenEventPlayer.color, 
        TextColor: Color.White,
        Reevaluation: HudTextRev.VisibleToSortOrderStringAndColor
    );
}

void RemoveScoreboardEntryForPlayer(in Player player) {
    DestroyHudText(scoreboardEntryHudId);
    scoreboardEntryHudId = null;
}

rule: "On Player Joined" 
Event.OnPlayerJoin {
    DisableGameModeHud(EventPlayer);
}



rule: "Create Welcome Screen HUD"
{
    #Player still can rotate camera while in welcome screen, so custom origin and direction must be set
    #English
    CreateInWorldText(
        VisibleTo: NotActive,
        Header: "JUMP TO START", 
        Position: LpFloatingHUDPosition(
            XOffset: 0, 
            YOffset: 0.5, 
            Origin: MAP_SETTINGS.WelcomeScreenViewPoint, 
            Direction: MAP_SETTINGS.WelcomeScreenDirection),
        Scale: 4, 
        TextColor: Color.Aqua,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleToAndPosition);
    
    #Russian
    CreateInWorldText(
        VisibleTo: NotActive,
        Header: "E - НАЧАТЬ НА РУССКОМ", 
        Position: LpFloatingHUDPosition(
            XOffset: 0, 
            YOffset: 0.6, 
            Origin: MAP_SETTINGS.WelcomeScreenViewPoint, 
            Direction: MAP_SETTINGS.WelcomeScreenDirection),
        Scale: 3, 
        TextColor: Color.SkyBlue,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleToAndPosition);
}
