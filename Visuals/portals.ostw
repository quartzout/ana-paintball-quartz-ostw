import "../Modules/portals.ostw";
import "../context_transfers.ostw";

# Returns string in human-readible format describing Portal object. Reevaluation supported 
String Stringify(Portal portal): 
    $"<Portal {portal}>\nPos: {portal.Position}\nUsesLeft: {portal.UsesLeft}\nCooldown: {portal.IsOnCooldown() ? 'T' : 'F'}{portal.CooldownTimer}";

Color IdleColorOf(in Portal portal): IDLE_PORTAL_COLORS_BY_USES_LEFT[portal.UsesLeft];

# Stores existing portals effect ids
globalvar Dictionary<Portal, Number> PortalToPortalEffectIds = { Keys: [], Values: [] };

Number AIM_AT_THE_WALL_TOOLTIP_FLASH_DURATION_SEC: 1;
playervar Number aimAtTheWallTooltipTimer = 0;
rule: "Create No Wall Met tooltip HUD" {
    CreateInWorldText(
        VisibleTo: ActiveIf(LocalPlayer.aimAtTheWallTooltipTimer > 0), 
        Header: LangString("AIM AT THE WALL", "ЦЕЛЬТЕСЬ В СТЕНУ"), 
        Position: LpFloatingHUDPosition(0, -0.2),
        Scale: 2.5, 
        Clipping: Clipping.DoNotClip, 
        TextColor: Color.Yellow, 
        Reevaluation: InworldTextRev.VisibleToPositionAndString, 
    );
}

rule: "Initialising portal visual effect events" {
    Subscribe(OnPortalSpawnedEvent, CreatePortalVisualEffect);
    Subscribe(OnPortalDespawnedEvent, DestroyPortalEffect);

    // Subscribers should not contain waits, so we call context transfer methods that trigger async subroutine with player context
    Subscribe(OnTeleportedEvent, ct_PlayTeleportedBeamEffectAsync);
    Subscribe(OnTeleportedEvent, ct_PlayTeleportedPovEffectAsync);
    Subscribe(OnTeleportedEvent, PlayTeleportedExplosionEffects);
    
    Subscribe(OnNoWallMetOnTeleportEvent, StartFlashingNoWallMetTooltip);
}



rule: "Initialising portal sound effect events" {
        
    Subscribe(OnPortalSpawnedEvent, portal => 
        PlayEffect(
            VisibleTo: All, 
            Type: PlayEffect.DebuffImpactSound,
            Position: portal.Position,
            Radius: 100,
        )
    );

    Subscribe(OnTeleportedEvent, (prevPos, afterPos, player)  => {
        
        LogToInspector("sound effect");

        PlayEffect(
            VisibleTo: All, 
            Type: PlayEffect.ExplosionSound,
            Position: afterPos,
            Radius: 100,
        );


    });


    Subscribe(OnPortalCooldownFinished, (portal) => {
        PlayEffect(
            VisibleTo: All, 
            Type: PlayEffect.BuffImpactSound,
            Position: portal.Position,
            Radius: 50
        );
    });

}


rule: "Create 'PRESS F TO TELEPORT' tooltip" {
    
    CreateInWorldText(
        VisibleTo: ActiveIf(
            IsTrueForAny(existingPortals, portal => CanPlayerTeleport(LocalPlayer, portal))
        ),
        Header: LangString("PRESS ", "НАЖМИТЕ ") + InputBindingString(Button.Interact),
        Position: LpFloatingHUDPosition(0.2, 0),
        Scale: 2,
        TextColor: Color.White,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleToPositionAndString
    );
}

void CreatePortalVisualEffect(in Portal portal) {
    

    // class object are passed by and copied *by reference* (and under the hood, a "reference" to an object is just its numeric index in the global list of all objects). 
    // This means that when we use EvaluateOnce(portal) inside Reev exspressions we do not freeze _the values_ of object, but just its reference - 
    // and when "portal" variable changes, such reev expression is still pointing to the original object instead of to a new one, and correctly 
    // reflecting changes to its members. And since we assign this method to a non-constant delegate event,
    // whatever is passed to "portal" argument variable when the delegate is called is not imprinted directly into actions - instead, an actual workshop
    // global variable is set with the value of the argument that we want to pass to the method, and then, when the delegate with this
    // method assigned to it is called, it gets the argument value from this global variable. Long story short - the "portal" 
    // is an actual workshop variable that is changing on different method calls, and so we cant directly put "portal.<member>" into reev expression
    // when we need to read from its members, instead we need to freeze the reference to it with EvaluateOnce(portal).<member>.

    // Using macro instead of local variable because on compilation local variable will turn into a workshop global as well.
    
    Portal frozenPortal: EvaluateOnce(portal);

    CreateEffect(
        VisibleTo: All,
        Type: Effect.GoodAura, 
        Color: 
            frozenPortal.IsOnCooldown() ? 
            PORTAL_ON_COOLDOWN_COLOR :
            (CanPlayerTeleport(LocalPlayer, frozenPortal) ? PORTAL_HIGHLIGHT_COLOR :  IdleColorOf(frozenPortal)), 
        Position: frozenPortal.Position, 
        Radius: PORTAL_RADIUS, 
        Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );

    Dictionary<Portal, Number>.Add(PortalToPortalEffectIds, portal, LastCreatedEntity()); 
}

void DestroyPortalEffect(in Portal portal) {
    DestroyEffect(PortalToPortalEffectIds.Get(portal));
}



Number BEAM_EFFECT_SHRINKING_DURATION: 0.3;
playervar Vector beamEffectEndPosition;
playervar Number teleportBeamEffectId;
void PlayTeleportedBeamEffectAsync(Vector playerBeforePos, Vector playerAfterPos) playervar "Play Teleported Beam Effect Async" {

    LogToInspector("start beam");

    # destroy effects that could been ongoing
    StopChasingVariable(EventPlayer.beamEffectEndPosition);
    DestroyEffect(EventPlayer.teleportBeamEffectId);

    # Beam effect
    EventPlayer.beamEffectEndPosition = playerBeforePos;
    EventPlayer.teleportBeamEffectId = CreateBeamEffect(
        VisibleTo: ActiveIf(LocalPlayer != EventPlayer),
        BeamType: BeamType.TorbjornTurretSightBeam, 
        StartPosition: playerAfterPos, 
        EndPosition: beamEffectEndPosition,
        Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
    
    # Start shrinking the beam after delay
    Wait(0.3);
    ChaseVariableOverTime(
        variable: beamEffectEndPosition, 
        destination: playerAfterPos, 
        duration: BEAM_EFFECT_SHRINKING_DURATION, 
        reevaluation: TimeChaseReevaluation.None
    );
    
    # destroy the beam after delay
    Wait(BEAM_EFFECT_SHRINKING_DURATION);
    StopChasingVariable(EventPlayer.beamEffectEndPosition);
    DestroyEffect(teleportBeamEffectId);

    LogToInspector("end beam");
}

 void PlayTeleportedExplosionEffects(Vector playerBeforePos, Vector playerAfterPos, Player player) {
    
    LogToInspector("explosion effects");

    # Explosion effect on origin point
    PlayEffect(
        VisibleTo: All, 
        Type: PlayEffect.GoodExplosion,
        Position: playerBeforePos, 
        Radius: 0.2
    );

    # Explosion effect on impact point
    PlayEffect(
        VisibleTo: player.enemies, 
        Type: PlayEffect.SombraTranslocatorReappearEffect,
        Position: playerAfterPos, 
        Radius: 7
    );
}

Number TELEPORTED_POV_EFFECT_DURATION: 0.5;
playervar Number teleportPovEffectId;
void PlayTeleportedPovEffectAsync(Vector playerBeforePos, Vector playerAfterPos) playervar "Play Teleported Pov Effect Async" {
    
    LogToInspector("pov effects");

    DestroyEffect(teleportPovEffectId);

    # FPS effect
    EventPlayer.teleportPovEffectId = CreateEffect(
        VisibleTo: EventPlayer, 
        Type: Effect.CassidyFlashbangStunnedEffect,
        Position: EventPlayer, 
        Radius: 1, 
        Reevaluation: EffectRev.None
    );

    # Destroying POV effect after delay
    Wait(TELEPORTED_POV_EFFECT_DURATION);
    DestroyEffect(EventPlayer.teleportPovEffectId);
}

void StartFlashingNoWallMetTooltip(Player player) {
    player.aimAtTheWallTooltipTimer = AIM_AT_THE_WALL_TOOLTIP_FLASH_DURATION_SEC;
    ChaseVariableAtRate(
        variable: aimAtTheWallTooltipTimer,
        destination: 0,
        rate: 1,
        reevaluation: RateChaseReevaluation.None
    );
}

void StopFlashingNoWallMetTooltip(Player player) {
    player.aimAtTheWallTooltipTimer = 0;
}