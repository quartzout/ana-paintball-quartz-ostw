import "../Namespaces/_helpers.ostw";
import "../Namespaces/_constants.ostw";
import "../Namespaces/_shared.ostw";



rule: "Explosion effect on death"
Event.OnDeath
{
    PlayEffect(All, PlayEffect.BadExplosion, LocalPlayer() == EventPlayer() ? Color.White : color, EventPlayer(), 2);
    PlayEffect(All, PlayEffect.RingExplosion, EventPlayer() == LocalPlayer() ? Color.White : color, PositionOf(EventPlayer()) + Down() * 0, 4);
}


globalvar Number[] paintballEffects_array = [];
playervar Number aimAtTheWallTimer = 0;


rule: "Paintballs on shots hitting walls"
Event.OngoingPlayer
if (IsFiringPrimary(EventPlayer()) == true)
{
    # End point 
    Vector temp_position = EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 100;
    # Hit position
    Vector temp_raycastPosition = RayCastHitPosition(EyePosition(EventPlayer()), temp_position, null, EventPlayer(), false);
    # Hit player
    Player temp_target = RayCastHitPlayer(EyePosition(EventPlayer()), temp_position, All, EventPlayer(), false);
    # Stop if hit player
    AbortIf(temp_target != null);
    # Stop if doesnt hit wall
    AbortIf(temp_raycastPosition == temp_position);
    # Waiting projectile to hit the wall
    if (!IsFiringSecondary(EventPlayer()))
    {
        Wait(DistanceBetween(EyePosition(EventPlayer()), temp_raycastPosition) / 125, WaitBehavior.IgnoreCondition);
    }
    # Explosion effect for event player
    PlayEffect(EventPlayer(), PlayEffect.BadExplosion, Color.White, temp_raycastPosition, 0.2);
    # Explosion effect for everyone else
    
    PlayEffect(EventPlayer.enemies, PlayEffect.BadExplosion, color, temp_raycastPosition, 0.2);
    # Destroy the oldest paintball effect if the effect array is full
    if (CountOf(paintballEffects_array) == 10)
    {
        DestroyEffect(paintballEffects_array[0]);
        ModifyVariable(paintballEffects_array, Operation.RemoveFromArrayByIndex, 0);
    }
    # Create paintball effect
    CreateEffect(All, Effect.Sphere, EvaluateOnce(EventPlayer()) == LocalPlayer() ? Color.White : color, temp_raycastPosition, 0.09, EffectRev.Color);
    ModifyVariable(paintballEffects_array, Operation.AppendToArray, LastCreatedEntity());
}

rule: "Wipe paintballs when player left"
Event.OnPlayerLeave
{
    for (define cycle_arrayIndex = 0; CountOf(paintballEffects_array); 1)
    {
        DestroyEffect(paintballEffects_array[cycle_arrayIndex]);
    }
}
