import "Visuals/portals.ostw";
import "Modules/scope_limit.ostw";

# Syncronous action that triggers execution of async subroutine with the same name and transforms player arguemnt into EventPlayer context
void ct_PlayTeleportedBeamEffectAsync(Vector playerBeforePos, Vector playerAfterPos, Player player) { 
    call_playTeleportedBeamEffectAsync_playerBeforePos = playerBeforePos;
    call_playTeleportedBeamEffectAsync_playerAfterPos = playerAfterPos;
    call_playTeleportedBeamEffectAsync = true;
}

playervar Boolean call_playTeleportedBeamEffectAsync = false;
playervar Vector call_playTeleportedBeamEffectAsync_playerBeforePos;
playervar Vector call_playTeleportedBeamEffectAsync_playerAfterPos;
rule: "player var to eventplayer context"
Event.OngoingPlayer 
if (call_playTeleportedBeamEffectAsync) {
    async PlayTeleportedBeamEffectAsync(call_playTeleportedBeamEffectAsync_playerBeforePos, call_playTeleportedBeamEffectAsync_playerAfterPos);
    call_playTeleportedBeamEffectAsync = false;
}



# Syncronous action that triggers execution of async subroutine with the same name and transforms player arguemnt into EventPlayer context
void ct_PlayTeleportedPovEffectAsync(Vector playerBeforePos, Vector playerAfterPos, Player player) { 
    call_PlayTeleportedPovEffectAsync_playerBeforePos = playerBeforePos;
    call_PlayTeleportedPovEffectAsync_playerAfterPos = playerAfterPos;
    call_PlayTeleportedPovEffectAsync = true;
}

playervar Boolean call_PlayTeleportedPovEffectAsync = false;
playervar Vector call_PlayTeleportedPovEffectAsync_playerBeforePos;
playervar Vector call_PlayTeleportedPovEffectAsync_playerAfterPos;
rule: "player var to eventplayer context"
Event.OngoingPlayer 
if (call_PlayTeleportedPovEffectAsync) {
    async PlayTeleportedPovEffectAsync(call_PlayTeleportedPovEffectAsync_playerBeforePos, call_PlayTeleportedPovEffectAsync_playerAfterPos);
    call_PlayTeleportedPovEffectAsync = false;
}


# Syncronous action that triggers execution of async subroutine with the same name and transforms player arguemnt into EventPlayer context
void ct_ForcePlayerToExitScopeAsync(Player player) { 
    call_ForcePlayerToExitScopeAsync = true;
}

playervar Boolean call_ForcePlayerToExitScopeAsync = false;
rule: "player var to eventplayer context"
Event.OngoingPlayer 
if (call_ForcePlayerToExitScopeAsync) {
    async ForcePlayerToExitScopeAsync();
    call_ForcePlayerToExitScopeAsync = false;
}


